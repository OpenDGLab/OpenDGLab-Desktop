name: Build Release
on:
  create:
    tags:
      - v*
jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get latest release version number
        id: get_version
        uses: battila7/get-version-action@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: OpenDGLab Desktop ${{ steps.get_version.outputs.version }}
          body: |
            OpenDGLab Desktop ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
  build_windows:
    strategy:
      matrix:
        qt_ver: [5.15.1]
        os: [windows-latest]
        qt_arch: [win64_msvc2019_64, win32_msvc2019]
        qt_target: ['desktop']
        include:
          - qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
          - qt_arch: win32_msvc2019
            msvc_arch: x86
            qt_arch_install: msvc2019
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Cache Qt
        id: windows-cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
          key: ${{ runner.os }}-Qt/${{matrix.qt_ver}}/${{matrix.qt_arch}}
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.11.1
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: ${{steps.windows-cache-qt.outputs.cache-hit }}
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get OpenDGLab Core Windows x64
        if: matrix.msvc_arch == 'x64'
        shell: powershell
        run: |
          Invoke-WebRequest https://github.com/OpenDGLab/OpenDGLab-Core/releases/latest/download/OpenDGLab-Core-Windows-X64.zip -OutFile OpenDGLab-Core-Windows-X64.zip
          Expand-Archive OpenDGLab-Core-Windows-X64.zip -DestinationPath OpenDGLab-Core-Unzipped
          New-Item opendglab-core/header -ItemType Directory -ea 0
          New-Item opendglab-core/bin -ItemType Directory -ea 0
          Copy-Item -Path "OpenDGLab-Core-Unzipped/releaseShared/libopendglab_api.h" -Destination "opendglab-core/header/"
          Copy-Item -Path "OpenDGLab-Core-Unzipped/releaseShared/libopendglab.dll" -Destination "opendglab-core/bin/"
          Copy-Item -Path "OpenDGLab-Core-Unzipped/releaseShared/libopendglab.def" -Destination "opendglab-core/bin/"
      - name: Get OpenDGLab Core Windows x86
        if: matrix.msvc_arch == 'x86'
        shell: powershell
        run: |
          Invoke-WebRequest https://github.com/OpenDGLab/OpenDGLab-Core/releases/latest/download/OpenDGLab-Core-Windows-X86.zip -OutFile OpenDGLab-Core-Windows-X86.zip
          Expand-Archive OpenDGLab-Core-Windows-X86.zip -DestinationPath OpenDGLab-Core-Unzipped
          New-Item opendglab-core/header -ItemType Directory -ea 0
          New-Item opendglab-core/bin -ItemType Directory -ea 0
          Copy-Item -Path "OpenDGLab-Core-Unzipped/releaseShared/libopendglab_api.h" -Destination "opendglab-core/header/"
          Copy-Item -Path "OpenDGLab-Core-Unzipped/releaseShared/libopendglab.dll" -Destination "opendglab-core/bin/"
          Copy-Item -Path "OpenDGLab-Core-Unzipped/releaseShared/libopendglab.def" -Destination "opendglab-core/bin/"
      - name: Get OpenDGLab OpenProtocol file
        shell: powershell
        run: |
          Invoke-WebRequest https://raw.githubusercontent.com/OpenDGLab/OpenDGLab-OpenProtocol/master/app.proto -OutFile proto/app.proto
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest
      - name: Get vcpkg
        uses: lukka/run-vcpkg@v6
        with:
         setupOnly: true
         vcpkgDirectory: '${{ github.workspace }}/vcpkg'
         vcpkgGitCommitId: 'c54abfafbe0051075952c507da1f1ec234875e05'
      - name: Install protobuf
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          %VCPKG_ROOT%/vcpkg install protobuf:%vc_arch%-windows
      - name: Windows Build
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          cd opendglab-core/bin
          lib /def:libopendglab.def /out:libopendglab.lib /machine:%vc_arch%
          cd ../..
          mkdir build
          cd build
          cmake -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake ..
          cmake --build . --target all
          cd ..
      - name: Upload Release Asset Windows x86
        uses: actions/upload-release-asset@v1
        if: matrix.msvc_arch == 'x86'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/OpenDGLab-Desktop-x86.zip
          asset_name: OpenDGLab-Desktop-Windows-x86.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Windows x64
        uses: actions/upload-release-asset@v1
        if: matrix.msvc_arch == 'x64'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/OpenDGLab-Desktop-x64.zip
          asset_name: OpenDGLab-Desktop-Windows-x64.zip
          asset_content_type: application/zip
  build_linux:
    strategy:
      matrix:
        qt_ver: [5.15.1]
        os: [ubuntu-latest]
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.11.1
        with:
          version: ${{ matrix.qt_ver }}
      - name: Install Package...
        run: |
          sudo apt install -y unzip libxcb-* libgl1-mesa-dev 
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get OpenDGLab Core Linux x64
        shell: bash
        run: |
          wget https://github.com/OpenDGLab/OpenDGLab-Core/releases/latest/download/OpenDGLab-Core-Linux-X64.zip
          unzip OpenDGLab-Core-Linux-X64.zip -d OpenDGLab-Core-Unzipped
          mkdir -p opendglab-core/header
          mkdir -p opendglab-core/bin
          cp OpenDGLab-Core-Unzipped/releaseStatic/libopendglab_api.h opendglab-core/header/
          cp OpenDGLab-Core-Unzipped/releaseStatic/libopendglab.a opendglab-core/bin/
      - name: Get OpenDGLab OpenProtocol file
        shell: bash
        run: |
          wget https://raw.githubusercontent.com/OpenDGLab/OpenDGLab-OpenProtocol/master/app.proto
          mv app.proto proto/
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest
      - name: Get vcpkg
        uses: lukka/run-vcpkg@v6
        with:
         setupOnly: true
         vcpkgDirectory: '${{ github.workspace }}/vcpkg'
         vcpkgGitCommitId: 'c54abfafbe0051075952c507da1f1ec234875e05'
      - name: Install protobuf
        run: |
          $VCPKG_ROOT/vcpkg install protobuf
      - name: Linux Build
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --target all
          cd ..
      - name: Packaging...
        run: |
          cd build
          wget -O linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/latest/download/linuxdeployqt-7-x86_64.AppImage
          chmod +x linuxdeployqt
          mkdir appImage
          cp ../external/OpenDGLab.desktop appImage/
          cp ../res/OpenDGLab-Desktop.png appImage/OpenDGLab.png
          cp OpenDGLab-Desktop appImage/
          cd appImage
          ../linuxdeployqt OpenDGLab-Desktop -appimage -unsupported-bundle-everything
          mv *.AppImage OpenDGLab-Desktop-Linux-x86_64.AppImage
          cd ../..
      - name: Upload Release Asset Linux x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/appImage/OpenDGLab-Desktop-Linux-x86_64.AppImage
          asset_name: OpenDGLab-Desktop-Linux-x86_64.AppImage
          asset_content_type: application/x-elf
  build_macos:
    strategy:
      matrix:
        qt_ver: [5.15.1]
        os: [macos-latest]
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.11.1
        with:
          version: ${{ matrix.qt_ver }}
      - name: Install Package...
        run: |
          brew install unzip
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get OpenDGLab Core MacOS x64
        shell: bash
        run: |
          wget https://github.com/OpenDGLab/OpenDGLab-Core/releases/latest/download/OpenDGLab-Core-MacOS-X64.zip
          unzip OpenDGLab-Core-MacOS-X64.zip -d OpenDGLab-Core-Unzipped
          mkdir -p opendglab-core/header
          mkdir -p opendglab-core/bin
          cp OpenDGLab-Core-Unzipped/releaseStatic/libopendglab_api.h opendglab-core/header/
          cp OpenDGLab-Core-Unzipped/releaseStatic/libopendglab.a opendglab-core/bin/
      - name: Get OpenDGLab OpenProtocol file
        shell: bash
        run: |
          wget https://raw.githubusercontent.com/OpenDGLab/OpenDGLab-OpenProtocol/master/app.proto
          mv app.proto proto/
      - name: Get latest CMake and ninja
        uses: lukka/get-cmake@latest
      - name: Get vcpkg
        uses: lukka/run-vcpkg@v6
        with:
         setupOnly: true
         vcpkgDirectory: '${{ github.workspace }}/vcpkg'
         vcpkgGitCommitId: 'c54abfafbe0051075952c507da1f1ec234875e05'
      - name: Install protobuf
        shell: bash
        run: |
          $VCPKG_ROOT/vcpkg install protobuf
      - name: MacOS Build
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --target all
          cd ..
      - name: Packaging...
        run: |
          cd build
          macdeployqt OpenDGLab-Desktop.app -dmg
          cd ..
      - name: Upload Release Asset MacOS x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/OpenDGLab-Desktop.dmg
          asset_name: OpenDGLab-Desktop-MacOS-x64.dmg
          asset_content_type: application/octet-stream